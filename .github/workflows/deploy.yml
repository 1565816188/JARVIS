name: Deploy

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # web
      - name: web - copy to aliyun
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ALIYUN_HOST }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}
          port: 22
          source: "web/*"
          target: "/opt/JARVIS/web"
          strip_components: 1

      - name: web - build and restart
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ALIYUN_HOST }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}
          port: 22
          script: |
            cd /opt/JARVIS/web
            pnpm install
            pnpm run build
            pm2 restart web || pm2 start npm --name "web" -- start

      # ai
      - name: ai - set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.2"

      - name: ai - install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
        working-directory: ai

      - name: ai - build executable with PyInstaller
        run: |
          pyinstaller -F ./main.py --add-binary "/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/py_mini_racer:." --add-binary "/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/akshare:./akshare"
        working-directory: ai

      - name: ai - kill old process and clean target directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ALIYUN_HOST }} 
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}  
          port: 22
          script: |
            if pgrep -f "/opt/JARVIS/ai/dist/main" > /dev/null; then
              echo "killing old process..."
              killall "/opt/JARVIS/ai/dist/main"
              sleep 2
            fi

            rm -rf /opt/JARVIS/ai
            if [ -d "/opt/JARVIS/ai" ]; then
              echo "target directory exists"
            else
              echo "target directory does not exist"
            fi

      - name: ai - copy to aliyun
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ALIYUN_HOST }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}
          port: 22
          source: "ai/*"
          target: "/opt/JARVIS/ai"
          strip_components: 1

      - name: ai - restart
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ALIYUN_HOST }} 
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}  
          port: 22
          script: |
            echo "$timestamp: Creating log directory..."
            mkdir -p /opt/JARVIS/ai/logs
            
            echo "$timestamp: 启动新进程..."
            nohup /opt/JARVIS/ai/dist/main > /opt/JARVIS/ai/logs/ai.log 2>&1 &
            nohup_exit_code=$?
            if [ $nohup_exit_code -ne 0 ]; then
              echo "$timestamp: ERROR: nohup 命令失败，退出代码为 $nohup_exit_code"
              exit 1
            fi

            process_id=$!
            echo "$timestamp: 进程 ID: $process_id"

            sleep 5 # 

            echo "$timestamp: 检查进程状态..."
            pgrep -f "/opt/JARVIS/ai/dist/main" > /dev/null
            if [ $? -eq 0 ]; then
                echo "$timestamp: pgrep 找到进程."
                ss -ltn | grep :8089 > /dev/null
                if [ $? -eq 0 ]; then
                    echo "$timestamp: 进程正在监听端口 8089."
                    echo "$timestamp: 进程启动成功."
                else
                    echo "$timestamp: ERROR: 进程未监听端口 8089."
                    exit 1
                fi

            else
                echo "$timestamp: ERROR: 进程启动失败 (pgrep)."
                exit 1
            fi